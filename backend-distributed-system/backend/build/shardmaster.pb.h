// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shardmaster.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shardmaster_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shardmaster_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shardmaster_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shardmaster_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shardmaster_2eproto;
class ConfigEntry;
class ConfigEntryDefaultTypeInternal;
extern ConfigEntryDefaultTypeInternal _ConfigEntry_default_instance_;
class GDPRDeleteRequest;
class GDPRDeleteRequestDefaultTypeInternal;
extern GDPRDeleteRequestDefaultTypeInternal _GDPRDeleteRequest_default_instance_;
class JoinRequest;
class JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class LeaveRequest;
class LeaveRequestDefaultTypeInternal;
extern LeaveRequestDefaultTypeInternal _LeaveRequest_default_instance_;
class MoveRequest;
class MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class Shard;
class ShardDefaultTypeInternal;
extern ShardDefaultTypeInternal _Shard_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigEntry* Arena::CreateMaybeMessage<::ConfigEntry>(Arena*);
template<> ::GDPRDeleteRequest* Arena::CreateMaybeMessage<::GDPRDeleteRequest>(Arena*);
template<> ::JoinRequest* Arena::CreateMaybeMessage<::JoinRequest>(Arena*);
template<> ::LeaveRequest* Arena::CreateMaybeMessage<::LeaveRequest>(Arena*);
template<> ::MoveRequest* Arena::CreateMaybeMessage<::MoveRequest>(Arena*);
template<> ::QueryResponse* Arena::CreateMaybeMessage<::QueryResponse>(Arena*);
template<> ::Shard* Arena::CreateMaybeMessage<::Shard>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Shard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shard) */ {
 public:
  inline Shard() : Shard(nullptr) {};
  virtual ~Shard();

  Shard(const Shard& from);
  Shard(Shard&& from) noexcept
    : Shard() {
    *this = ::std::move(from);
  }

  inline Shard& operator=(const Shard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shard& operator=(Shard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shard* internal_default_instance() {
    return reinterpret_cast<const Shard*>(
               &_Shard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shard& a, Shard& b) {
    a.Swap(&b);
  }
  inline void Swap(Shard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shard* New() const final {
    return CreateMaybeMessage<Shard>(nullptr);
  }

  Shard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shard& from);
  void MergeFrom(const Shard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shard";
  }
  protected:
  explicit Shard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardmaster_2eproto);
    return ::descriptor_table_shardmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerFieldNumber = 1,
    kUpperFieldNumber = 2,
  };
  // uint32 lower = 1;
  void clear_lower();
  ::PROTOBUF_NAMESPACE_ID::uint32 lower() const;
  void set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lower() const;
  void _internal_set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 upper = 2;
  void clear_upper();
  ::PROTOBUF_NAMESPACE_ID::uint32 upper() const;
  void set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upper() const;
  void _internal_set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Shard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lower_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardmaster_2eproto;
};
// -------------------------------------------------------------------

class JoinRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JoinRequest) */ {
 public:
  inline JoinRequest() : JoinRequest(nullptr) {};
  virtual ~JoinRequest();

  JoinRequest(const JoinRequest& from);
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinRequest* New() const final {
    return CreateMaybeMessage<JoinRequest>(nullptr);
  }

  JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRequest& from);
  void MergeFrom(const JoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JoinRequest";
  }
  protected:
  explicit JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardmaster_2eproto);
    return ::descriptor_table_shardmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // string server = 1;
  void clear_server();
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server(
      std::string* server);
  private:
  const std::string& _internal_server() const;
  void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // @@protoc_insertion_point(class_scope:JoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardmaster_2eproto;
};
// -------------------------------------------------------------------

class LeaveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LeaveRequest) */ {
 public:
  inline LeaveRequest() : LeaveRequest(nullptr) {};
  virtual ~LeaveRequest();

  LeaveRequest(const LeaveRequest& from);
  LeaveRequest(LeaveRequest&& from) noexcept
    : LeaveRequest() {
    *this = ::std::move(from);
  }

  inline LeaveRequest& operator=(const LeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRequest& operator=(LeaveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveRequest*>(
               &_LeaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LeaveRequest& a, LeaveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveRequest* New() const final {
    return CreateMaybeMessage<LeaveRequest>(nullptr);
  }

  LeaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveRequest& from);
  void MergeFrom(const LeaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LeaveRequest";
  }
  protected:
  explicit LeaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardmaster_2eproto);
    return ::descriptor_table_shardmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated string servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  const std::string& servers(int index) const;
  std::string* mutable_servers(int index);
  void set_servers(int index, const std::string& value);
  void set_servers(int index, std::string&& value);
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  std::string* add_servers();
  void add_servers(const std::string& value);
  void add_servers(std::string&& value);
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& servers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_servers();
  private:
  const std::string& _internal_servers(int index) const;
  std::string* _internal_add_servers();
  public:

  // @@protoc_insertion_point(class_scope:LeaveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardmaster_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {};
  virtual ~MoveRequest();

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveRequest* New() const final {
    return CreateMaybeMessage<MoveRequest>(nullptr);
  }

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveRequest& from);
  void MergeFrom(const MoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardmaster_2eproto);
    return ::descriptor_table_shardmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
    kShardFieldNumber = 2,
  };
  // string server = 1;
  void clear_server();
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server(
      std::string* server);
  private:
  const std::string& _internal_server() const;
  void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // .Shard shard = 2;
  bool has_shard() const;
  private:
  bool _internal_has_shard() const;
  public:
  void clear_shard();
  const ::Shard& shard() const;
  ::Shard* release_shard();
  ::Shard* mutable_shard();
  void set_allocated_shard(::Shard* shard);
  private:
  const ::Shard& _internal_shard() const;
  ::Shard* _internal_mutable_shard();
  public:
  void unsafe_arena_set_allocated_shard(
      ::Shard* shard);
  ::Shard* unsafe_arena_release_shard();

  // @@protoc_insertion_point(class_scope:MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  ::Shard* shard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardmaster_2eproto;
};
// -------------------------------------------------------------------

class ConfigEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigEntry) */ {
 public:
  inline ConfigEntry() : ConfigEntry(nullptr) {};
  virtual ~ConfigEntry();

  ConfigEntry(const ConfigEntry& from);
  ConfigEntry(ConfigEntry&& from) noexcept
    : ConfigEntry() {
    *this = ::std::move(from);
  }

  inline ConfigEntry& operator=(const ConfigEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigEntry& operator=(ConfigEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEntry* internal_default_instance() {
    return reinterpret_cast<const ConfigEntry*>(
               &_ConfigEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConfigEntry& a, ConfigEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigEntry* New() const final {
    return CreateMaybeMessage<ConfigEntry>(nullptr);
  }

  ConfigEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigEntry& from);
  void MergeFrom(const ConfigEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigEntry";
  }
  protected:
  explicit ConfigEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardmaster_2eproto);
    return ::descriptor_table_shardmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardsFieldNumber = 2,
    kServerFieldNumber = 3,
  };
  // repeated .Shard shards = 2;
  int shards_size() const;
  private:
  int _internal_shards_size() const;
  public:
  void clear_shards();
  ::Shard* mutable_shards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Shard >*
      mutable_shards();
  private:
  const ::Shard& _internal_shards(int index) const;
  ::Shard* _internal_add_shards();
  public:
  const ::Shard& shards(int index) const;
  ::Shard* add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Shard >&
      shards() const;

  // string server = 3;
  void clear_server();
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server(
      std::string* server);
  private:
  const std::string& _internal_server() const;
  void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // @@protoc_insertion_point(class_scope:ConfigEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Shard > shards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardmaster_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueryResponse) */ {
 public:
  inline QueryResponse() : QueryResponse(nullptr) {};
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(nullptr);
  }

  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueryResponse";
  }
  protected:
  explicit QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardmaster_2eproto);
    return ::descriptor_table_shardmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // repeated .ConfigEntry config = 1;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  ::ConfigEntry* mutable_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigEntry >*
      mutable_config();
  private:
  const ::ConfigEntry& _internal_config(int index) const;
  ::ConfigEntry* _internal_add_config();
  public:
  const ::ConfigEntry& config(int index) const;
  ::ConfigEntry* add_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigEntry >&
      config() const;

  // @@protoc_insertion_point(class_scope:QueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigEntry > config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardmaster_2eproto;
};
// -------------------------------------------------------------------

class GDPRDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GDPRDeleteRequest) */ {
 public:
  inline GDPRDeleteRequest() : GDPRDeleteRequest(nullptr) {};
  virtual ~GDPRDeleteRequest();

  GDPRDeleteRequest(const GDPRDeleteRequest& from);
  GDPRDeleteRequest(GDPRDeleteRequest&& from) noexcept
    : GDPRDeleteRequest() {
    *this = ::std::move(from);
  }

  inline GDPRDeleteRequest& operator=(const GDPRDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPRDeleteRequest& operator=(GDPRDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GDPRDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GDPRDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const GDPRDeleteRequest*>(
               &_GDPRDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GDPRDeleteRequest& a, GDPRDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPRDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPRDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GDPRDeleteRequest* New() const final {
    return CreateMaybeMessage<GDPRDeleteRequest>(nullptr);
  }

  GDPRDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GDPRDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GDPRDeleteRequest& from);
  void MergeFrom(const GDPRDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPRDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GDPRDeleteRequest";
  }
  protected:
  explicit GDPRDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardmaster_2eproto);
    return ::descriptor_table_shardmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:GDPRDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardmaster_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shard

// uint32 lower = 1;
inline void Shard::clear_lower() {
  lower_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shard::_internal_lower() const {
  return lower_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shard::lower() const {
  // @@protoc_insertion_point(field_get:Shard.lower)
  return _internal_lower();
}
inline void Shard::_internal_set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lower_ = value;
}
inline void Shard::set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lower(value);
  // @@protoc_insertion_point(field_set:Shard.lower)
}

// uint32 upper = 2;
inline void Shard::clear_upper() {
  upper_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shard::_internal_upper() const {
  return upper_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shard::upper() const {
  // @@protoc_insertion_point(field_get:Shard.upper)
  return _internal_upper();
}
inline void Shard::_internal_set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  upper_ = value;
}
inline void Shard::set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upper(value);
  // @@protoc_insertion_point(field_set:Shard.upper)
}

// -------------------------------------------------------------------

// JoinRequest

// string server = 1;
inline void JoinRequest::clear_server() {
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JoinRequest::server() const {
  // @@protoc_insertion_point(field_get:JoinRequest.server)
  return _internal_server();
}
inline void JoinRequest::set_server(const std::string& value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:JoinRequest.server)
}
inline std::string* JoinRequest::mutable_server() {
  // @@protoc_insertion_point(field_mutable:JoinRequest.server)
  return _internal_mutable_server();
}
inline const std::string& JoinRequest::_internal_server() const {
  return server_.Get();
}
inline void JoinRequest::_internal_set_server(const std::string& value) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JoinRequest::set_server(std::string&& value) {
  
  server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JoinRequest.server)
}
inline void JoinRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:JoinRequest.server)
}
inline void JoinRequest::set_server(const char* value,
    size_t size) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JoinRequest.server)
}
inline std::string* JoinRequest::_internal_mutable_server() {
  
  return server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JoinRequest::release_server() {
  // @@protoc_insertion_point(field_release:JoinRequest.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinRequest::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JoinRequest.server)
}
inline std::string* JoinRequest::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:JoinRequest.server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JoinRequest::unsafe_arena_set_allocated_server(
    std::string* server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server != nullptr) {
    
  } else {
    
  }
  server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JoinRequest.server)
}

// -------------------------------------------------------------------

// LeaveRequest

// repeated string servers = 1;
inline int LeaveRequest::_internal_servers_size() const {
  return servers_.size();
}
inline int LeaveRequest::servers_size() const {
  return _internal_servers_size();
}
inline void LeaveRequest::clear_servers() {
  servers_.Clear();
}
inline std::string* LeaveRequest::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:LeaveRequest.servers)
  return _internal_add_servers();
}
inline const std::string& LeaveRequest::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const std::string& LeaveRequest::servers(int index) const {
  // @@protoc_insertion_point(field_get:LeaveRequest.servers)
  return _internal_servers(index);
}
inline std::string* LeaveRequest::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:LeaveRequest.servers)
  return servers_.Mutable(index);
}
inline void LeaveRequest::set_servers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:LeaveRequest.servers)
  servers_.Mutable(index)->assign(value);
}
inline void LeaveRequest::set_servers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:LeaveRequest.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
inline void LeaveRequest::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LeaveRequest.servers)
}
inline void LeaveRequest::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LeaveRequest.servers)
}
inline std::string* LeaveRequest::_internal_add_servers() {
  return servers_.Add();
}
inline void LeaveRequest::add_servers(const std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LeaveRequest.servers)
}
inline void LeaveRequest::add_servers(std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LeaveRequest.servers)
}
inline void LeaveRequest::add_servers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LeaveRequest.servers)
}
inline void LeaveRequest::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LeaveRequest.servers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LeaveRequest::servers() const {
  // @@protoc_insertion_point(field_list:LeaveRequest.servers)
  return servers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LeaveRequest::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:LeaveRequest.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// MoveRequest

// string server = 1;
inline void MoveRequest::clear_server() {
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MoveRequest::server() const {
  // @@protoc_insertion_point(field_get:MoveRequest.server)
  return _internal_server();
}
inline void MoveRequest::set_server(const std::string& value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:MoveRequest.server)
}
inline std::string* MoveRequest::mutable_server() {
  // @@protoc_insertion_point(field_mutable:MoveRequest.server)
  return _internal_mutable_server();
}
inline const std::string& MoveRequest::_internal_server() const {
  return server_.Get();
}
inline void MoveRequest::_internal_set_server(const std::string& value) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoveRequest::set_server(std::string&& value) {
  
  server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MoveRequest.server)
}
inline void MoveRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MoveRequest.server)
}
inline void MoveRequest::set_server(const char* value,
    size_t size) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MoveRequest.server)
}
inline std::string* MoveRequest::_internal_mutable_server() {
  
  return server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoveRequest::release_server() {
  // @@protoc_insertion_point(field_release:MoveRequest.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoveRequest::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MoveRequest.server)
}
inline std::string* MoveRequest::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MoveRequest.server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MoveRequest::unsafe_arena_set_allocated_server(
    std::string* server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server != nullptr) {
    
  } else {
    
  }
  server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MoveRequest.server)
}

// .Shard shard = 2;
inline bool MoveRequest::_internal_has_shard() const {
  return this != internal_default_instance() && shard_ != nullptr;
}
inline bool MoveRequest::has_shard() const {
  return _internal_has_shard();
}
inline void MoveRequest::clear_shard() {
  if (GetArena() == nullptr && shard_ != nullptr) {
    delete shard_;
  }
  shard_ = nullptr;
}
inline const ::Shard& MoveRequest::_internal_shard() const {
  const ::Shard* p = shard_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Shard*>(
      &::_Shard_default_instance_);
}
inline const ::Shard& MoveRequest::shard() const {
  // @@protoc_insertion_point(field_get:MoveRequest.shard)
  return _internal_shard();
}
inline void MoveRequest::unsafe_arena_set_allocated_shard(
    ::Shard* shard) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shard_);
  }
  shard_ = shard;
  if (shard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MoveRequest.shard)
}
inline ::Shard* MoveRequest::release_shard() {
  auto temp = unsafe_arena_release_shard();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Shard* MoveRequest::unsafe_arena_release_shard() {
  // @@protoc_insertion_point(field_release:MoveRequest.shard)
  
  ::Shard* temp = shard_;
  shard_ = nullptr;
  return temp;
}
inline ::Shard* MoveRequest::_internal_mutable_shard() {
  
  if (shard_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shard>(GetArena());
    shard_ = p;
  }
  return shard_;
}
inline ::Shard* MoveRequest::mutable_shard() {
  // @@protoc_insertion_point(field_mutable:MoveRequest.shard)
  return _internal_mutable_shard();
}
inline void MoveRequest::set_allocated_shard(::Shard* shard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shard_;
  }
  if (shard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shard);
    if (message_arena != submessage_arena) {
      shard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shard, submessage_arena);
    }
    
  } else {
    
  }
  shard_ = shard;
  // @@protoc_insertion_point(field_set_allocated:MoveRequest.shard)
}

// -------------------------------------------------------------------

// ConfigEntry

// repeated .Shard shards = 2;
inline int ConfigEntry::_internal_shards_size() const {
  return shards_.size();
}
inline int ConfigEntry::shards_size() const {
  return _internal_shards_size();
}
inline void ConfigEntry::clear_shards() {
  shards_.Clear();
}
inline ::Shard* ConfigEntry::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigEntry.shards)
  return shards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Shard >*
ConfigEntry::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:ConfigEntry.shards)
  return &shards_;
}
inline const ::Shard& ConfigEntry::_internal_shards(int index) const {
  return shards_.Get(index);
}
inline const ::Shard& ConfigEntry::shards(int index) const {
  // @@protoc_insertion_point(field_get:ConfigEntry.shards)
  return _internal_shards(index);
}
inline ::Shard* ConfigEntry::_internal_add_shards() {
  return shards_.Add();
}
inline ::Shard* ConfigEntry::add_shards() {
  // @@protoc_insertion_point(field_add:ConfigEntry.shards)
  return _internal_add_shards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Shard >&
ConfigEntry::shards() const {
  // @@protoc_insertion_point(field_list:ConfigEntry.shards)
  return shards_;
}

// string server = 3;
inline void ConfigEntry::clear_server() {
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigEntry::server() const {
  // @@protoc_insertion_point(field_get:ConfigEntry.server)
  return _internal_server();
}
inline void ConfigEntry::set_server(const std::string& value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:ConfigEntry.server)
}
inline std::string* ConfigEntry::mutable_server() {
  // @@protoc_insertion_point(field_mutable:ConfigEntry.server)
  return _internal_mutable_server();
}
inline const std::string& ConfigEntry::_internal_server() const {
  return server_.Get();
}
inline void ConfigEntry::_internal_set_server(const std::string& value) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigEntry::set_server(std::string&& value) {
  
  server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigEntry.server)
}
inline void ConfigEntry::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigEntry.server)
}
inline void ConfigEntry::set_server(const char* value,
    size_t size) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigEntry.server)
}
inline std::string* ConfigEntry::_internal_mutable_server() {
  
  return server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigEntry::release_server() {
  // @@protoc_insertion_point(field_release:ConfigEntry.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigEntry::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigEntry.server)
}
inline std::string* ConfigEntry::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConfigEntry.server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigEntry::unsafe_arena_set_allocated_server(
    std::string* server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server != nullptr) {
    
  } else {
    
  }
  server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigEntry.server)
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .ConfigEntry config = 1;
inline int QueryResponse::_internal_config_size() const {
  return config_.size();
}
inline int QueryResponse::config_size() const {
  return _internal_config_size();
}
inline void QueryResponse::clear_config() {
  config_.Clear();
}
inline ::ConfigEntry* QueryResponse::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:QueryResponse.config)
  return config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigEntry >*
QueryResponse::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:QueryResponse.config)
  return &config_;
}
inline const ::ConfigEntry& QueryResponse::_internal_config(int index) const {
  return config_.Get(index);
}
inline const ::ConfigEntry& QueryResponse::config(int index) const {
  // @@protoc_insertion_point(field_get:QueryResponse.config)
  return _internal_config(index);
}
inline ::ConfigEntry* QueryResponse::_internal_add_config() {
  return config_.Add();
}
inline ::ConfigEntry* QueryResponse::add_config() {
  // @@protoc_insertion_point(field_add:QueryResponse.config)
  return _internal_add_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigEntry >&
QueryResponse::config() const {
  // @@protoc_insertion_point(field_list:QueryResponse.config)
  return config_;
}

// -------------------------------------------------------------------

// GDPRDeleteRequest

// string key = 1;
inline void GDPRDeleteRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GDPRDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:GDPRDeleteRequest.key)
  return _internal_key();
}
inline void GDPRDeleteRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:GDPRDeleteRequest.key)
}
inline std::string* GDPRDeleteRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:GDPRDeleteRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GDPRDeleteRequest::_internal_key() const {
  return key_.Get();
}
inline void GDPRDeleteRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GDPRDeleteRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GDPRDeleteRequest.key)
}
inline void GDPRDeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GDPRDeleteRequest.key)
}
inline void GDPRDeleteRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GDPRDeleteRequest.key)
}
inline std::string* GDPRDeleteRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GDPRDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:GDPRDeleteRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GDPRDeleteRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GDPRDeleteRequest.key)
}
inline std::string* GDPRDeleteRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GDPRDeleteRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GDPRDeleteRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GDPRDeleteRequest.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shardmaster_2eproto
